/* tslint:disable */
/* eslint-disable */
/**
 * 业务应用
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddBDDepartmentInput } from '../models';
import { AdminResultBDDepartment } from '../models';
import { AdminResultListBDDepartmentOutput } from '../models';
import { AdminResultSqlSugarPagedListBDDepartmentOutput } from '../models';
import { BDDepartmentInput } from '../models';
import { DeleteBDDepartmentInput } from '../models';
import { UpdateBDDepartmentInput } from '../models';
/**
 * BDDepartmentApi - axios parameter creator
 * @export
 */
export const BDDepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBDDepartmentAddPost: async (body?: AddBDDepartmentInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bD_Department/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBDDepartmentDeletePost: async (body?: DeleteBDDepartmentInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bD_Department/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBDDepartmentDetailGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiBDDepartmentDetailGet.');
            }
            const localVarPath = `/api/bD_Department/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [depId] 
         * @param {string} [workshopId] 
         * @param {string} [depNo] 
         * @param {string} [depName] 
         * @param {string} [depDesc] 
         * @param {number} [status] 
         * @param {string} [remarks] 
         * @param {string} [orgID] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBDDepartmentListGet: async (depId?: string, workshopId?: string, depNo?: string, depName?: string, depDesc?: string, status?: number, remarks?: string, orgID?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bD_Department/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (depId !== undefined) {
                localVarQueryParameter['DepId'] = depId;
            }

            if (workshopId !== undefined) {
                localVarQueryParameter['WorkshopId'] = workshopId;
            }

            if (depNo !== undefined) {
                localVarQueryParameter['DepNo'] = depNo;
            }

            if (depName !== undefined) {
                localVarQueryParameter['DepName'] = depName;
            }

            if (depDesc !== undefined) {
                localVarQueryParameter['DepDesc'] = depDesc;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (remarks !== undefined) {
                localVarQueryParameter['Remarks'] = remarks;
            }

            if (orgID !== undefined) {
                localVarQueryParameter['OrgID'] = orgID;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (field !== undefined) {
                localVarQueryParameter['Field'] = field;
            }

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (descStr !== undefined) {
                localVarQueryParameter['DescStr'] = descStr;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBDDepartmentPagePost: async (body?: BDDepartmentInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bD_Department/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBDDepartmentUpdatePost: async (body?: UpdateBDDepartmentInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bD_Department/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BDDepartmentApi - functional programming interface
 * @export
 */
export const BDDepartmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentAddPost(body?: AddBDDepartmentInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BDDepartmentApiAxiosParamCreator(configuration).apiBDDepartmentAddPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {DeleteBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentDeletePost(body?: DeleteBDDepartmentInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BDDepartmentApiAxiosParamCreator(configuration).apiBDDepartmentDeletePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentDetailGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultBDDepartment>>> {
            const localVarAxiosArgs = await BDDepartmentApiAxiosParamCreator(configuration).apiBDDepartmentDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [depId] 
         * @param {string} [workshopId] 
         * @param {string} [depNo] 
         * @param {string} [depName] 
         * @param {string} [depDesc] 
         * @param {number} [status] 
         * @param {string} [remarks] 
         * @param {string} [orgID] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentListGet(depId?: string, workshopId?: string, depNo?: string, depName?: string, depDesc?: string, status?: number, remarks?: string, orgID?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultListBDDepartmentOutput>>> {
            const localVarAxiosArgs = await BDDepartmentApiAxiosParamCreator(configuration).apiBDDepartmentListGet(depId, workshopId, depNo, depName, depDesc, status, remarks, orgID, page, pageSize, field, order, descStr, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {BDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentPagePost(body?: BDDepartmentInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminResultSqlSugarPagedListBDDepartmentOutput>>> {
            const localVarAxiosArgs = await BDDepartmentApiAxiosParamCreator(configuration).apiBDDepartmentPagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UpdateBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentUpdatePost(body?: UpdateBDDepartmentInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BDDepartmentApiAxiosParamCreator(configuration).apiBDDepartmentUpdatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BDDepartmentApi - factory interface
 * @export
 */
export const BDDepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AddBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentAddPost(body?: AddBDDepartmentInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BDDepartmentApiFp(configuration).apiBDDepartmentAddPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentDeletePost(body?: DeleteBDDepartmentInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BDDepartmentApiFp(configuration).apiBDDepartmentDeletePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 主键Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentDetailGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultBDDepartment>> {
            return BDDepartmentApiFp(configuration).apiBDDepartmentDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [depId] 
         * @param {string} [workshopId] 
         * @param {string} [depNo] 
         * @param {string} [depName] 
         * @param {string} [depDesc] 
         * @param {number} [status] 
         * @param {string} [remarks] 
         * @param {string} [orgID] 
         * @param {number} [page] 当前页码
         * @param {number} [pageSize] 页码容量
         * @param {string} [field] 排序字段
         * @param {string} [order] 排序方向
         * @param {string} [descStr] 降序排序
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentListGet(depId?: string, workshopId?: string, depNo?: string, depName?: string, depDesc?: string, status?: number, remarks?: string, orgID?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultListBDDepartmentOutput>> {
            return BDDepartmentApiFp(configuration).apiBDDepartmentListGet(depId, workshopId, depNo, depName, depDesc, status, remarks, orgID, page, pageSize, field, order, descStr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentPagePost(body?: BDDepartmentInput, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminResultSqlSugarPagedListBDDepartmentOutput>> {
            return BDDepartmentApiFp(configuration).apiBDDepartmentPagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateBDDepartmentInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBDDepartmentUpdatePost(body?: UpdateBDDepartmentInput, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BDDepartmentApiFp(configuration).apiBDDepartmentUpdatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BDDepartmentApi - object-oriented interface
 * @export
 * @class BDDepartmentApi
 * @extends {BaseAPI}
 */
export class BDDepartmentApi extends BaseAPI {
    /**
     * 
     * @param {AddBDDepartmentInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BDDepartmentApi
     */
    public async apiBDDepartmentAddPost(body?: AddBDDepartmentInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BDDepartmentApiFp(this.configuration).apiBDDepartmentAddPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {DeleteBDDepartmentInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BDDepartmentApi
     */
    public async apiBDDepartmentDeletePost(body?: DeleteBDDepartmentInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BDDepartmentApiFp(this.configuration).apiBDDepartmentDeletePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 主键Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BDDepartmentApi
     */
    public async apiBDDepartmentDetailGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultBDDepartment>> {
        return BDDepartmentApiFp(this.configuration).apiBDDepartmentDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [depId] 
     * @param {string} [workshopId] 
     * @param {string} [depNo] 
     * @param {string} [depName] 
     * @param {string} [depDesc] 
     * @param {number} [status] 
     * @param {string} [remarks] 
     * @param {string} [orgID] 
     * @param {number} [page] 当前页码
     * @param {number} [pageSize] 页码容量
     * @param {string} [field] 排序字段
     * @param {string} [order] 排序方向
     * @param {string} [descStr] 降序排序
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BDDepartmentApi
     */
    public async apiBDDepartmentListGet(depId?: string, workshopId?: string, depNo?: string, depName?: string, depDesc?: string, status?: number, remarks?: string, orgID?: string, page?: number, pageSize?: number, field?: string, order?: string, descStr?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultListBDDepartmentOutput>> {
        return BDDepartmentApiFp(this.configuration).apiBDDepartmentListGet(depId, workshopId, depNo, depName, depDesc, status, remarks, orgID, page, pageSize, field, order, descStr, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {BDDepartmentInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BDDepartmentApi
     */
    public async apiBDDepartmentPagePost(body?: BDDepartmentInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminResultSqlSugarPagedListBDDepartmentOutput>> {
        return BDDepartmentApiFp(this.configuration).apiBDDepartmentPagePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UpdateBDDepartmentInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BDDepartmentApi
     */
    public async apiBDDepartmentUpdatePost(body?: UpdateBDDepartmentInput, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BDDepartmentApiFp(this.configuration).apiBDDepartmentUpdatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
